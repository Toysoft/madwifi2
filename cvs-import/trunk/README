$Id$

Atheros Driver For Linux
=========================

* Copyright (c) 2002, 2003 Sam Leffler.  All rights reserved.

Read the file COPYRIGHT for the complete copyright.

This software contains a Linux kernel driver for Atheros-based
Wireless LAN devices.  The driver supports both station and AP modes
of operation.  The driver is actually a port of the BSD Atheros
driver and includes a port of the 802.11 link layer code originally
found in NetBSD.  You may/will also find other BSD-ish glue code.
As much as possible I've tried to make this driver a "native Linux"
driver that conforms to Linux style and operation but in some areas
of operation you will see elements of BSD design/operation.

The driver functions as a normal network device and uses the Wireless
Extensions API.  As such normal Linux tools can and should be used
with it.

There is only one driver included here; it supports miniPCI and Cardbus
devices.  The driver can be built as a module or linked into the kernel.

The driver depends on a wlan module that contains the 802.11 state machine,
protocol support, and other glue code.  This code is derived from work
that first appeared in NetBSD and then FreeBSD.

The Atheros drivers depends on a chunk of code termed the Hardware
Access Layer (HAL).  This code manages much of the hardware-specific
operation of the driver.  The HAL is provided in a binary-only form in
order to comply with FCC regulations.  If you wish to use this driver
on a platform that is not already supported please contact the author.
Note that this is only necessary for new _architectures_; the HAL is
not tied to any specific version of Linux.


Atheros Hardware
================
There are currently 3 generations of Atheros 802.11 wireless devices:

5210	supports 11a only
5211	supports both 11a and 11b
5212	supports 11a, 11b, and 11g

These parts have been incorporated in a variety of retail products
including cardbus cards from DLink, Linksys, and Netgear; and
mini-pci cards from some of these same vendors.  In addition many
laptop vendors use Atheros mini-pci cards for their builtin wireless
support.

In general, if a device is identified as ``11a only'' it is almost
certain to contain an Atheros 5210 part in it.  There are several
a+b combo parts but many retail products use the 5211.  Likewise
for the latest generation of a+b+g combo products.


Building the driver
===================
To build the driver at the top level edit Makefile.inc and set the
pathname to your Linux kernel distribution.  By default this is set to
/usr/src/linux.

Then do:

	make

This will generate two important files:

driver/ath_pci.o (driver for PCI/Cardbus devices), and
wlan/wlan.o (802.11 support layer)

These files can be loaded with insmod or modprobe; e.g.

	insmod wlan/wlan.o
	insmod driver/ath_pci.o

(note you must load the wlan module first as the driver depends on it).
You can also use:

	make install

to install the drivers where they can be loaded automatically at boot.

[So far this has only been tested with RH 7.3 and 2.4.18, and 2.4.20
 kernels on an x86 machine.]


Using the driver
================
The driver should support any Atheros-based cardbus or pci devices.
Management uses the normal Linux tools such as ifconfig.  Support
is included for versions 12 and later of the Wireless Extensions
so tools like iwconfig should work too.

To use this software in ``station mode'' (i.e. as a client) just
bring the interface up and the driver will scan for all access
points in all supported frequency bands supported by the hardware.
Specifically for 5210-based devices scanning will happen in the
5Ghz (11a) range, for 5211-based devices scanning will happen over
both 2Ghz (11b) ad 5GHz frequencies (11a).  For 5212-based devices
the driver will scan both 2Ghz and 5GHz ranges and also look for
11g devices in the 2Ghz range.  To restrict operation you can either
select a mode (e.g. 11b) using iwpriv or, more commonly, select the
AP based on SSID and/or channel.

To use this software in ``hostap mode'' you need to configure it
with iwconfig and you will probably want to lock the operating mode
to one of 11a, 11b, or 11g if you have a multi-mode card (if you
do not lock the mode then the driver will select a mode for you;
usually 11a).  Otherwise you will need to configure the device to
bridge frames to a wired LAN or similar.

NOTE: adhoc mode is presently untested and may not work (send fixes).


Security/Crpto Support
======================
The driver supports fixed/shared key WEP using the hardware.  Newer
Atheros hardware is capable of much more (e.g. TKIP and Michael)
but that work is not yet available.

This distribution does not include support for 802.1x authentication
or (obviously) WPA.  Support for .1x should be possible using
existing tools such as xsupplicant but this has not been tried.
Work is planned to provide ``native'' .1x and WPA support.


Known Problems
==============
1. Roaming mode is broken.  If you lose access point by going out of range
   the driver does not automatically re-associate.
2. Adhoc mode is untested and possibly/probably broken.
3. Performance in lossy environments is suboptimal.  The algorithm used to
   select the rate for transmitted packes is very simplistic.  There is no
   software retransmit; only hardware retransmit is used.  Contributors are
   encouraged to replace the existing rate control algorithm with a better
   one (hint: all the information needed is available in the driver).
4. 11g support is little tested and may have interoperability problems.
   The software is known to associate with 11g access points but
   interoperability may be problematic until vendors update firmware in
   existing 11g products.  If you encounter problems using an 11g access
   point you should be able to workaround incompatibilities by locking the
   driver to 11b mode (iwpriv mode 2).


Feedback and Contributions
==========================
Please send all correspondence about this driver to:

	atheros-linux@errno.com

Fixes and enhancements are encouraged.  I will try to respond in a
timely manner but understand this software is provided as-is; with
no support.
